{"version":3,"sources":["comments/CommentForm.js","comments/Comment.js","api.js","comments/Comments.js","App.js","index.js"],"names":["CommentForm","handleSubmit","submitLabel","hasCancelButton","handleCancel","initialText","useState","text","setText","isTextareaDisabled","length","className","onSubmit","event","preventDefault","placeholder","value","onChange","e","target","disabled","type","onClick","Comment","comment","replies","setActiveComment","activeComment","updateComment","deleteComment","addComment","parentId","currentUserId","isEditing","id","isReplying","timePassed","Date","createdAt","canDelete","userId","canReply","Boolean","canEdit","replyId","class","src","username","email","body","map","reply","getComments","a","createComment","Math","random","toString","substr","toISOString","Comments","commentsUrl","backendComments","setBackendComments","rootComments","filter","backendComment","createCommentApi","then","commentId","updateCommentApi","updatedBackendComments","window","confirm","deleteCommentApi","useEffect","getCommentsApi","data","alt","rootComment","sort","b","getTime","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05e7f9b7.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\n//defining the function Commentform for default form that will accept the text for creating a post\r\n\r\nfunction CommentForm({\r\n    handleSubmit, submitLabel, hasCancelButton = false, handleCancel, initialText = \"\",\r\n}) {\r\n    const [text, setText] = useState(initialText);\r\n    const isTextareaDisabled = text.length === 0;\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        handleSubmit(text);\r\n        setText(\"\");\r\n    };\r\n\r\n    //Markup for executing form actions that collects the post information and post it as the first post\r\n    return (\r\n        <form className=\"form\" onSubmit={onSubmit}>\r\n            <textarea\r\n                className=\"comment-form-textarea\"\r\n                placeholder=\"What are your thoughts?\"\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)} />\r\n            <button className=\"comment-form-button\" disabled={isTextareaDisabled}>\r\n                {submitLabel}\r\n            </button>\r\n            {hasCancelButton && (\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"comment-form-button comment-form-cancel-button\"\r\n                    onClick={handleCancel}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            )}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CommentForm;","import PostForm from \"./CommentForm\";\r\n\r\n//Defining all the variable required to process and perform action on individual posts\r\nconst Comment = ({\r\n    comment,\r\n    replies,\r\n    setActiveComment,\r\n    activeComment,\r\n    updateComment,\r\n    deleteComment,\r\n    addComment,\r\n    parentId = null,\r\n    currentUserId,\r\n}) => {\r\n    const isEditing =\r\n        activeComment &&\r\n        activeComment.id === comment.id &&\r\n        activeComment.type === \"editing\";\r\n    const isReplying =\r\n        activeComment &&\r\n        activeComment.id === comment.id &&\r\n        activeComment.type === \"replying\";\r\n    const fiveMinutes = 300000;\r\n    const timePassed = new Date() - new Date(comment.createdAt) > fiveMinutes;\r\n    const canDelete =\r\n    currentUserId === comment.userId && replies.length === 0;\r\n    const canReply = Boolean(currentUserId);\r\n    const canEdit = currentUserId === comment.userId && !timePassed;\r\n    const replyId = parentId ? parentId : comment.id;\r\n\r\n\r\n    //Markup for active post\r\n        \r\n    return (\r\n        <div key={comment.id} className=\"comment\">\r\n            <div className=\"comment-image-container\">\r\n                <img class=\"img\" src=\"/pic.png\" />\r\n            </div>\r\n            <div className=\"comment-right-part\">\r\n                <div className=\"comment-content\">\r\n                    <div className=\"comment-author\">{comment.username}</div>\r\n                    <div className=\"email\">{comment.email}</div>\r\n                </div>\r\n                {!isEditing && <div className=\"comment-text\">{comment.body}</div>}\r\n                {isEditing && (\r\n                    <PostForm\r\n                        submitLabel=\"Update\"\r\n                        hasCancelButton\r\n                        initialText={comment.body}\r\n                        handleSubmit={(text) => updateComment(text, comment.id)}\r\n                        handleCancel={() => {\r\n                            setActiveComment(null);\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n\r\n                {/*Markup below will check and render the required conditons for action(delete, reply or edit) on a given comment*/}\r\n\r\n                <div className=\"comment-actions\">\r\n                    {canReply && (\r\n                        <div\r\n                            className=\"comment-action\"\r\n                            onClick={() =>\r\n                                setActiveComment({ id: comment.id, type: \"replying\" })\r\n                            }\r\n                        >\r\n                            Reply\r\n                        </div>\r\n                    )}\r\n                    {canEdit && (\r\n                        <div\r\n                            className=\"comment-action\"\r\n                            onClick={() =>\r\n                                setActiveComment({ id: comment.id, type: \"editing\" })\r\n                            }\r\n                        >\r\n                            Edit\r\n                        </div>\r\n                    )}\r\n                    {canDelete && (\r\n                        <div\r\n                            className=\"comment-action\"\r\n                            onClick={() => deleteComment(comment.id)}\r\n                        >\r\n                            Delete\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                {isReplying && (\r\n                    <PostForm\r\n                        submitLabel=\"Reply\"\r\n                        handleSubmit={(text) => addComment(text, replyId)}\r\n                    />\r\n                )}\r\n                {replies.length > 0 && (\r\n                    <div className=\"replies\">\r\n                        {replies.map((reply) => (\r\n                            <Comment\r\n                                comment={reply}\r\n                                key={reply.id}\r\n                                setActiveComment={setActiveComment}\r\n                                activeComment={activeComment}\r\n                                updateComment={updateComment}\r\n                                deleteComment={deleteComment}\r\n                                addComment={addComment}\r\n                                parentId={comment.id}\r\n                                replies={[]}\r\n                                currentUserId={currentUserId}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;","export const getComments = async () => {\r\n\r\n\r\n    //The primary data when rendered is stored here but ideally will be fetched from the backend\r\n    return [\r\n        {\r\n            id: \"1\",\r\n            body: \"Dude Im so pumped up for the event\",\r\n            username: \"Jack\",\r\n            userId: \"1\",\r\n            parentId: null,\r\n            email: \"jackhampton@gmail.com\",\r\n            createdAt: \"2021-08-22T23:00:33.010+02:00\",\r\n        },\r\n        {\r\n            id: \"2\",\r\n            body: \"Can someone help me with accomodation? and provide me some information?\",\r\n            username: \"Craig\",\r\n            userId: \"2\",\r\n            parentId: null,\r\n            email: \"Craigcaldwell@gmail.com\",\r\n            createdAt: \"2021-08-22T23:00:33.010+02:00\",\r\n        },\r\n        {\r\n            id: \"3\",\r\n            body: \"Yeah right!! I can totally relate\",\r\n            username: \"Taylor\",\r\n            userId: \"2\",\r\n            parentId: \"1\",\r\n            email: \"Taylorhampton@gmail.com\",\r\n            createdAt: \"2021-08-22T23:00:33.010+02:00\",\r\n        },\r\n        {\r\n            id: \"4\",\r\n            body: \"I have some arrangements, maybe I can help. Message ME!!\",\r\n            username: \"Adama\",\r\n            userId: \"2\",\r\n            parentId: \"2\",\r\n            email: \"Adamahampton@gmail.com\",\r\n            createdAt: \"2021-08-16T22:00:33.010+02:00\",\r\n        },\r\n    ];\r\n};\r\n\r\nexport const createComment = async (text, parentId = null) => {\r\n    return {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        body: text,\r\n        parentId,\r\n        userId: \"1\",\r\n        username: \"John\",\r\n        email: \"jackhampton@gmail.com\",\r\n        createdAt: new Date().toISOString(),\r\n    };\r\n};\r\n\r\nexport const updateComment = async (text) => {\r\n    return { text };\r\n};\r\n\r\nexport const deleteComment = async () => {\r\n    return {};\r\n};","\r\n//\"import\" will import all the required functions from the other compnents\r\nimport { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\nimport {\r\n    getComments as getCommentsApi,\r\n    createComment as createCommentApi,\r\n    updateComment as updateCommentApi,\r\n    deleteComment as deleteCommentApi,\r\n} from \"../api\";\r\n\r\n//Defining variables for form actions\r\nconst Comments = ({ commentsUrl, currentUserId }) => {\r\n    const [backendComments, setBackendComments] = useState([]);\r\n    const [activeComment, setActiveComment] = useState(null);\r\n    const rootComments = backendComments.filter(\r\n        (backendComment) => backendComment.parentId === null\r\n    );\r\n\r\n    //getReplies function will render replies of a specific post by passing commentId (unique identifier for parentId)\r\n\r\n    const getReplies = (commentId) =>\r\n        backendComments\r\n            .filter((backendComment) => backendComment.parentId === commentId)\r\n            .sort(\r\n                (a, b) =>\r\n                    new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n            );\r\n\r\n    //addComment function will be used to create a post with 2 arguments passed, text and parentId(will be used later for replies)\r\n\r\n    const addComment = (text, parentId) => {\r\n        createCommentApi(text, parentId).then((comment) => {\r\n            setBackendComments([comment, ...backendComments]);\r\n            setActiveComment(null);\r\n        });\r\n    };\r\n\r\n    const updateComment = (text, commentId) => {\r\n        updateCommentApi(text).then(() => {\r\n            const updatedBackendComments = backendComments.map((backendComment) => {\r\n                if (backendComment.id === commentId) {\r\n                    return { ...backendComment, body: text };\r\n                }\r\n                return backendComment;\r\n            });\r\n            setBackendComments(updatedBackendComments);\r\n            setActiveComment(null);\r\n        });\r\n    };\r\n    const deleteComment = (commentId) => {\r\n        if (window.confirm(\"Are you sure you want to remove comment?\")) {\r\n            deleteCommentApi().then(() => {\r\n                const updatedBackendComments = backendComments.filter(\r\n                    (backendComment) => backendComment.id !== commentId\r\n                );\r\n                setBackendComments(updatedBackendComments);\r\n            });\r\n        }\r\n    };\r\n\r\n    //useEffect() used to fetch data\r\n\r\n    useEffect(() => {\r\n        getCommentsApi().then((data) => {\r\n            setBackendComments(data);\r\n        });\r\n    }, []);\r\n\r\n\r\n    //All the related markup\r\n    return (\r\n        <div className=\"comments\">\r\n            <div className=\"Title\">\r\n                <h3 className=\"comments-title\">DOTA Internationals 2021</h3>\r\n                <img className=\"banner\" src=\"/dota.jpg\" alt=\"dota international 2021 banner\" />\r\n            </div>\r\n\r\n            {/*Rendering the Post form by calling Commentform */}\r\n\r\n            <CommentForm submitLabel=\"Post\" handleSubmit={addComment} />\r\n\r\n            <div className=\"comments-container\">\r\n\r\n                {rootComments.map((rootComment) => (\r\n                    <Comment\r\n                        key={rootComment.id}\r\n                        comment={rootComment}\r\n                        replies={getReplies(rootComment.id)}\r\n                        activeComment={activeComment}\r\n                        setActiveComment={setActiveComment}\r\n                        addComment={addComment}\r\n                        deleteComment={deleteComment}\r\n                        updateComment={updateComment}\r\n                        currentUserId={currentUserId}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;","import Posts from \"./comments/Comments\";\n\nconst App = () => {\n  return (\n    <div>\n      <nav className=\"nav_container\">\n        <span class=\"nav\">Home</span>\n        <span class=\"nav\">Profile </span>\n        <span class=\"nav\"> Notifications </span>\n      </nav>\n      <div className=\"post_container\"> <h1 className=\"header\">E-sports Review </h1>\n        <Posts\n          commentsUrl=\"http://localhost:3004/comments\"\n          currentUserId=\"1\"\n        />\n      </div>\n      <footer className=\"footer\">\n        &#169; Copyrights by Angle sport reviews\n      </footer>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\n\n\n// Calling out the app.js to render it\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}